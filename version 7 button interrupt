The provided code is important to a greenhouse because it helps automate and control the greenhouse environment, ensuring optimal conditions for plant growth. 
Specifically, it uses a button interrupt feature to enhance user interaction with the greenhouse monitoring system. Here's an explanation of how the button code works:
Button Pin Configuration: The code assigns a pin for a physical button (BUTTON_PIN) in the setup section. This button allows greenhouse operators or users to manually interact with the monitoring system.
Input Pull-Up Configuration: The button pin is configured as an input with an internal pull-up resistor (INPUT_PULLUP). This setup ensures that the pin is normally pulled high (at 5V) when the button is not pressed.
When the button is pressed, it connects the pin to ground (0V). Button Press Detection: In the loop section, the code continuously checks the state of the button pin using digitalRead(BUTTON_PIN). 
If the button is pressed (i.e., its state is LOW because of the pull-up resistor), the code considers this as a button press event.
LCD and Backlight Control: When the button is pressed, the code reacts by turning on the LCD display (lcd.display()) and its backlight (lcd.backlight()). It then waits for 10 seconds (delay(10000)) with both the LCD and backlight on.
This allows the user to read the current sensor data on the display. Turning Off the Display: After 10 seconds, the code turns off the display (lcd.noDisplay()) and the backlight (lcd.noBacklight()) to conserve power. 
This is done to prevent unnecessary power consumption when the display is not actively being used.
Button State Tracking: The code keeps track of whether the button was pressed using the buttonPressed variable. This variable is set to true when the button is pressed and false when it is not.
In summary, the button interrupt functionality in the code allows greenhouse operators to manually activate the LCD display and backlight for a short period when needed. 
This feature is valuable for quick checks and monitoring without the need to keep the display continuously on, which helps save power and prolong the life of the display in a greenhouse setting.


#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);

#include <dht11.h>

const int RELAY_PIN = 5;       // Water Pump Relay
const int FAN_RELAY_PIN = 6;   // Fan Relay
const int MOISTURE_SIGNAL = A1; // Soil Moisture Sensor
const int DHT11PIN = 9;        // DHT11 Sensor
const int HEATER_PIN = 3;      // Heater Relay
const int BUTTON_PIN = 2;      // Button Pin
int moistureInPercent;

dht11 DHT11;
bool lcdOn = true;  // Track whether the LCD is currently on
bool buttonPressed = false;  // Track button state

void setup() {
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(FAN_RELAY_PIN, OUTPUT);
  pinMode(HEATER_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);  // Use internal pull-up resistor for the button
  lcd.init();
  lcd.clear();
  lcd.noDisplay();
  
  lcd.setCursor(0, 0);
  lcd.print("T=");

  lcd.setCursor(2, 1);
  lcd.print("Humid=");

  Serial.begin(9600);
}

void loop() {
  int Moisture = analogRead(MOISTURE_SIGNAL);
  Serial.print("Soil Moisture Level: ");
  Serial.println(Moisture);

  // Check if the button is pressed
  if (digitalRead(BUTTON_PIN) == LOW) {
    buttonPressed = true;
    lcdOn = true;  // Turn on the LCD
    lcd.display(); // Turn on the display
    lcd.backlight(); // Turn on the Backlight
    delay(10000); // Wait for 10 seconds with the LCD and backlight on
    lcd.noDisplay(); // Turn off the display
    lcd.noBacklight(); // Turn off the Backlight
  } else {
    buttonPressed = false;
  }

  lcd.setCursor(7, 0);
  lcd.print("S=");
  lcd.setCursor(9, 0);
  lcd.print(moistureInPercent);
  lcd.print("% ");

  moistureInPercent = (Moisture / 10);

  if (Moisture > 900) {
    digitalWrite(RELAY_PIN, HIGH);
  } else {
    digitalWrite(RELAY_PIN, LOW);
  }

  DHT11.read(DHT11PIN);

  Serial.print("Humidity (%): ");
  Serial.println((float)DHT11.humidity, 2);

  Serial.print("Temperature (C): ");
  Serial.println((float)DHT11.temperature, 2);

  lcd.setCursor(8, 1);
  lcd.print(DHT11.humidity);
  Serial.print("Current humidity = ");
  Serial.print(DHT11.humidity);
  Serial.print("%  ");
  lcd.print("%");

  lcd.setCursor(2, 0);
  lcd.print(DHT11.temperature);
  Serial.print("Temperature = ");
  Serial.print(DHT11.temperature);
  lcd.print("C");

  if (DHT11.temperature > 30.0) {
    digitalWrite(FAN_RELAY_PIN, HIGH);
  } else {
    digitalWrite(FAN_RELAY_PIN, LOW);
  }

  if (DHT11.temperature < 20.0) {
    digitalWrite(HEATER_PIN, HIGH);
  } else {
    digitalWrite(HEATER_PIN, LOW);
  }

  delay(2000);
}
