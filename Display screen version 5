the LCD is used to provide a visual interface for monitoring temperature, humidity, and soil moisture levels. 
It displays these values in real-time on the screen, making it easier to observe and control your environmental monitoring system.
Initialization: The code starts by setting up the necessary components. It initializes the LCD screen to display information, configures pins for various devices like the water pump, fan, and heater, and sets up serial communication for debugging.
Looping: The main part of the code operates in a continuous loop. It constantly monitors and reacts to changes in environmental conditions.
Soil Moisture Monitoring: It reads the soil moisture level using a soil moisture sensor. If the moisture level is below a certain threshold, it turns on a water pump to water the soil.
Humidity and Temperature Sensing: The code also reads the humidity and temperature using a DHT11 sensor. It displays these values on the LCD screen and sends them to the serial monitor for monitoring.
If the temperature exceeds a certain value, it turns on a fan to cool the environment, and if it falls below another value, it turns on a heater to warm it up.
Repeat: This loop continues to run, continually updating the LCD display and taking actions based on the sensor readings.
In essence, the code creates an automated environmental monitoring and control system that ensures the soil remains adequately moist, controls temperature and humidity, and provides real-time data on an LCD screen for easy monitoring.

#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2);

#include <dht11.h>

#define RELAY_PIN 5       // Water Pump Relay
#define FAN_RELAY_PIN 6   // Fan Relay
#define MOISTURE_SIGNAL A1 // Soil Moisture Sensor
#define DHT11PIN 9        // DHT11 Sensor
#define HEATER_PIN 3      // Heater Relay
int moistureInPercent;

dht11 DHT11;

void setup() {
  pinMode(RELAY_PIN, OUTPUT);
  pinMode(FAN_RELAY_PIN, OUTPUT); // Initialize fan relay pin
  pinMode(HEATER_PIN, OUTPUT);    // Initialize heater relay pin
  lcd.init();
  lcd.clear();
  lcd.backlight();

  lcd.setCursor(0, 0);
  lcd.print("T=");

  lcd.setCursor(2, 1);
  lcd.print("Humid=");

  Serial.begin(9600); // Start the serial communication
}

void loop() {
  int Moisture = analogRead(MOISTURE_SIGNAL);
  Serial.print("Soil Moisture Level: ");
  Serial.println(Moisture);
  lcd.setCursor(7, 0);
  lcd.print("S=");
  lcd.setCursor(9, 0);
  lcd.print(moistureInPercent);
  lcd.print("% ");

  moistureInPercent = (Moisture/10);



  if (Moisture > 900) {
    digitalWrite(RELAY_PIN, HIGH); // Turn on pump
  } else {
    digitalWrite(RELAY_PIN, LOW); // Turn off pump
  }

  DHT11.read(DHT11PIN);

  Serial.print("Humidity (%): ");
  Serial.println((float)DHT11.humidity, 2);

  Serial.print("Temperature (C): ");
  Serial.println((float)DHT11.temperature, 2);

  lcd.setCursor(8, 1);
  lcd.print(DHT11.humidity);
  Serial.print("Current humidity = ");
  Serial.print(DHT11.humidity);
  Serial.print("%  ");
  lcd.print("%");

  lcd.setCursor(2, 0);
  lcd.print(DHT11.temperature);
  Serial.print("Temperature = ");
  Serial.print(DHT11.temperature);
  lcd.print("C"); // Clear the previous temperature value

  if (DHT11.temperature > 30.0) {
    digitalWrite(FAN_RELAY_PIN, HIGH); // Turn on fan
  } else {
    digitalWrite(FAN_RELAY_PIN, LOW); // Turn off fan
  }

  // Control the heater based on your desired conditions.
  if (DHT11.temperature < 20.0) {
    digitalWrite(HEATER_PIN, HIGH); // Turn on heater
  } else {
    digitalWrite(HEATER_PIN, LOW); // Turn off heater
  }

  delay(2000); // Delay for 2 seconds before the next moisture and temperature reading
}
